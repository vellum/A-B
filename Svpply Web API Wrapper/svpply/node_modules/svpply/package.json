{
  "name": "svpply",
  "preferGlobal": "false",
  "description": "Node.js wrapper for the Svpply API.",
  "author": {
    "name": "Jonathan Vingiano",
    "email": "j@okfoc.us",
    "url": "@jgv"
  },
  "version": "0.1.2",
  "main": "./lib/svpply.js",
  "repository": {
    "type": "git",
    "url": "http://github.com/jgv/svpply-node.git"
  },
  "keywords": [
    "svpply",
    "api wrapper"
  ],
  "engines": {
    "node": ">= 0.5.0"
  },
  "dependencies": {
    "request": ">= 1.9.0"
  },
  "devDependencies": {
    "vows": "0.6.x"
  },
  "scripts": {
    "test": "vows test/*-test.js"
  },
  "readme": "# Svpply \n[![Build Status](https://secure.travis-ci.org/jgv/svpply-node.png)](http://travis-ci.org/jgv/svpply-node)\n\nA Node.js wrapper for the [Svpply API](https://developer.svpply.com). Right now there is only coverage for non-authenticated calls, contributions are more than welcome. Check out the Svpply API [docs](https://developer.svpply.com) for very thorough documentation of all the calls.\n\nParts of this wrapper were extracted from [Tug of Store](http://tugofstore.com), an API experiment by [OKFocus](http://okfoc.us).\n\n## Installation\n\n### Installing npm (Node Package Manager)\n\n```\ncurl http://npmjs.org/install.sh | sh\n```\n\n### Installing Svpply\n\n```\n$ [sudo] npm install svpply\n```\n\n## Usage\n\nThis interface to the Svpply API is meant to be semantically similar to way Svpply's API is organized.\n\n``` js\n\n  var svpply = require('svpply');  // require the svpply library\n  var api = new svpply();  // setup svpply object\n\n  // Retrieves a product object.\n  api.products.show(100, callback); \n  \n  // Search products for a specified query. \n  api.products.find({\"query\": \"shoes\"}, callback); \n\n  // Retrieves the collections that include the specified product.\n  api.products.collections(100, callback);  \n\n  // Retrieves the users that want the specified product.\n  api.products.users(100, callback);  \n  \n  // Lists the comments on the specified product.\n  api.products.comments(100, callback);  \n\n  // Retrieves a user object.\n  api.users.show(100, callback);  \n\n  // Search users for a specified query.\n  api.users.find({\"query\" : \"jonathan\"}, callback); \n\n  // Retrieves the products a user has \"wanted\".\n  api.users.wants(100, callback);  \n\n  // Retrieves the specified product if it is wanted by the specified user.\n  api.users.wanted(100, 200,  callback);  \n\n  // Retrieves the products a user has marked as owned.\n  api.users.owns(100, callback);  \n\n  // Retrieves the specified product if it is owned by the specified user.\n  api.users.owned(100, 200, callback);  \n\n  // Retrieves the users that the specified user is following.\n  api.users.following(100, callback); \n\n  // Retrieves the second specified user if he/she is followed by the first specified user.\n  api.users.isFollowingUser(100, 200, callback);  \n\n  // Retrieves the stores that the specified user is following.\n  api.users.stores(100, callback);  \n\n  // Retrieves a specified store if it is followed by the specified user.\n  api.users.isFollowingStore(100, callback); \n\n  // Retrieves the searches that the specified user is following.\n  api.users.searches(100, callback);  \n\n  // Retrieves the users that are following the specified user.\n  api.users.followers(100, callback);  \n\n  // Retrieve the specified collection.\n  api.users.collections(100, callback);  \n\n  // Retrieves the products in a collection.\n  api.users.collection(100, 200, callback);  \n\n  // Retrieve the specified collection.\n  api.collections.show(100, callback);  \n\n  // Search collections for a specified query.\n  api.collections.find({ \"query\": \"okfocus\" }, callback);  \n\n  // Retrieves the products in a collection.\n  api.collections.products(100, callback);  \n\n  // Retrieves the users in a collection.\n  api.collections.users(100, callback);  \n\n  // Lists the comments on the specified collection.\n  api.collections.comments(100, callback);  \n\n  // Retrieves product categories and their related endpoints. \n  api.shop.categories(callback); \n\n  // Retrieves the products within a category.\n  api.collections.show('Audio', 'Tech', {\"query\" : \"headphones\" }, callback);  \n  \n  // Returns the number of API requests remaining.\n  api.remaining(callback); \n\n```\n\n###  Run Tests\n\n```\n$ npm test\n```\n",
  "readmeFilename": "readme.md",
  "_id": "svpply@0.1.2",
  "dist": {
    "shasum": "34290bc313cdd8f8d11ea18b277928ed2b91fe65"
  },
  "_from": "svpply@",
  "_resolved": "https://registry.npmjs.org/svpply/-/svpply-0.1.2.tgz"
}
